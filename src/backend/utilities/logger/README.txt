Default LoggerIDs (0-4) are at the top of the file; this is because they
are directly referenced in various places and need to be the same every
time.  Other logger ID's are dynamically added and retreived as they are
created/needed.

The deathlogger is where you send output that is sent to the logger but 
you don't actually want to log the output (the output is sent to 'die').

init_close_count is a semaphore used to keep track of when to actually
initialize and close the logger factory.  When running tests, we will 
initialize the logger factory before running all tests consequtively.
However, some tests may also initialize and close the logger factory
within the test.  Example intialize and close calling order:
initialize
initialize
close
initialize
close
close

When closing, all ouput is logged to the text files.  Upon re-initializing
and re-closing, all of the new output will overwrite the old logged output.
To stop this, the semaphore makes sure it only initializes once and closes
once.

Existing add and build logger code should not need to be modified. Build 
logger creates a new logger, sets the loggerID which is generated by the
call to addLogger (which simply adds the logger to the list of loggers)
and returns the logger.

IMPORTANT: HOW TO ADD NEW LOGGERS TO INITIALIZE - THIS NEEDS TO BE DONE 
WHEN NEW EXCEPTION CLASSES ARE CREATED AND YOU WISH TO LOG THEM (WHICH IS
THE POINT)

1) create the logger
	Logger newLogger = buildLogger(path + "where you want it to go", 
		parentLoggerID)

2) set the related Exception class's loggerID to the newly created 
logger's ID
	NewException.setLoggerID(newLogger)